/****************************************
      cdc  add for Master APM code
****************************************/
#define MYMSG_RQ   0xA5     /*request for master msg*/
#define MYMSG_NACK 0xA7     /*nack master*/

static int16_t mymotor_out[4] = {0,0,0,0};
static uint8_t masterMode = 1;


static void masterUARTInit(void)
{
	hal.uartC->begin(115200, 8, 64);  /*baudRate，rxSpace, txSpace*/
	hal.scheduler->delay(5);
}

static void sendSlaveMsg(void)
{
	uint8_t  recvByte;	
	uint8_t  ix;	
	uint8_t  sendByte;

	if(hal.uartC->available()>=1){
		recvByte = hal.uartC->read();
		switch(recvByte){
		case MYMSG_RQ:
			hal.uartC->write(0xFF);

			setMyMotorOut();

			
			for(ix=0; ix<4; ix++){
				sendByte = (mymotor_out[ix]&0xFF00)>>8;
				hal.uartC->write(sendByte);
				sendByte = (mymotor_out[ix]&0xFF);
				hal.uartC->write(sendByte);		
			}
			break;
		default: /**/
			break;
		}

		/*if received extra more, flush it*/
		if(hal.uartC->available()>=1){
			hal.uartC->flush();
		}	
	}
}

 
/***********************************************************************************
8轴机架配置: 7,2,1,8电机为顺时针方向转动
   7------5------1------3
          |      |
          |      |
   6------2------4------8
4轴机架(X)配置
          3------1
          |      |
          |      |
          2------4
*************************************************************************************/
/*set output to mymotor_out[4]
 */
static void setMyMotorOut(void)
{
	mymotor_out[0] = motors.motorOut[2];
	mymotor_out[1] = motors.motorOut[3];
	mymotor_out[2] = motors.motorOut[0];
	mymotor_out[3] = motors.motorOut[7];
}

/**************************************************
主机在收到模式切换指令时执行以下操作:
1 分体，机构的动作，待添加代码
2 将机架重新配置为四轴 
**************************************************/
static void changeMasterMode(void)
{
	motors.remove_motor();
}
